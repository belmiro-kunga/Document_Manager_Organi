version: "3.8"

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: adms-postgres-prod
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-adms_prod}
      POSTGRES_USER: ${DATABASE_USER:-adms_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-adms_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - adms-prod-network
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-adms_user} -d ${DATABASE_NAME:-adms_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: adms-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - adms-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: adms-elasticsearch-prod
    environment:
      - node.name=adms-es-node-prod
      - cluster.name=adms-cluster-prod
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_prod_data:/usr/share/elasticsearch/data
    networks:
      - adms-prod-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Application Services
  auth-service:
    build:
      context: .
      dockerfile: packages/auth-service/Dockerfile
      target: production
    container_name: adms-auth-service-prod
    ports:
      - "${AUTH_SERVICE_PORT:-3001}:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${DATABASE_USER:-adms_user}:${DATABASE_PASSWORD:-adms_password}@postgres:5432/${DATABASE_NAME:-adms_prod}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - adms-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  document-service:
    build:
      context: .
      dockerfile: packages/document-service/Dockerfile
      target: production
    container_name: adms-document-service-prod
    ports:
      - "${DOCUMENT_SERVICE_PORT:-3002}:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://${DATABASE_USER:-adms_user}:${DATABASE_PASSWORD:-adms_password}@postgres:5432/${DATABASE_NAME:-adms_prod}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      STORAGE_PROVIDER: ${STORAGE_PROVIDER:-local}
      LOCAL_STORAGE_PATH: /app/storage
      # S3 Configuration (if using S3)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - document_storage:/app/storage
    networks:
      - adms-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  python-analysis:
    build:
      context: .
      dockerfile: packages/python-analysis/Dockerfile
      target: production
    container_name: adms-python-analysis-prod
    ports:
      - "${PYTHON_ANALYSIS_PORT:-8001}:8001"
    environment:
      PYTHONPATH: /app/src
      PYTHONUNBUFFERED: 1
      DATABASE_URL: postgresql://${DATABASE_USER:-adms_user}:${DATABASE_PASSWORD:-adms_password}@postgres:5432/${DATABASE_NAME:-adms_prod}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - python_models:/app/models
      - python_temp:/app/temp
    networks:
      - adms-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  web-client:
    build:
      context: .
      dockerfile: packages/web-client/Dockerfile
      target: production
    container_name: adms-web-client-prod
    ports:
      - "${WEB_CLIENT_PORT:-3000}:80"
    environment:
      NODE_ENV: production
      API_URL: ${API_URL:-http://localhost:8000}
      APP_TITLE: ${APP_TITLE:-Advanced DMS}
      DEFAULT_LANGUAGE: ${DEFAULT_LANGUAGE:-pt-PT}
    depends_on:
      - auth-service
      - document-service
      - python-analysis
    networks:
      - adms-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    container_name: adms-api-gateway-prod
    ports:
      - "${API_GATEWAY_PORT:-8000}:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - auth-service
      - document-service
      - python-analysis
    networks:
      - adms-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

# Networks
networks:
  adms-prod-network:
    driver: bridge
    name: adms-prod-network

# Volumes
volumes:
  postgres_prod_data:
    driver: local
    name: adms-postgres-prod-data
  redis_prod_data:
    driver: local
    name: adms-redis-prod-data
  elasticsearch_prod_data:
    driver: local
    name: adms-elasticsearch-prod-data
  document_storage:
    driver: local
    name: adms-document-storage
  python_models:
    driver: local
    name: adms-python-models
  python_temp:
    driver: local
    name: adms-python-temp
